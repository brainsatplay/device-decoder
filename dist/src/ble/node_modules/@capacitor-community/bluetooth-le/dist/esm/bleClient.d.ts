export const BleClient: BleClientClass;
declare class BleClientClass {
    scanListener: import("@capacitor/core").PluginListenerHandle;
    eventListeners: Map<any, any>;
    queue: <T>(fn: () => Promise<T>) => Promise<T>;
    enableQueue(): void;
    disableQueue(): void;
    initialize(options: any): Promise<void>;
    isEnabled(): Promise<boolean>;
    requestEnable(): Promise<void>;
    enable(): Promise<void>;
    disable(): Promise<void>;
    startEnabledNotifications(callback: any): Promise<void>;
    stopEnabledNotifications(): Promise<void>;
    isLocationEnabled(): Promise<boolean>;
    openLocationSettings(): Promise<void>;
    openBluetoothSettings(): Promise<void>;
    openAppSettings(): Promise<void>;
    setDisplayStrings(displayStrings: any): Promise<void>;
    requestDevice(options: any): Promise<import("@capacitor-community/bluetooth-le").BleDevice>;
    requestLEScan(options: any, callback: any): Promise<void>;
    stopLEScan(): Promise<void>;
    getDevices(deviceIds: any): Promise<import("@capacitor-community/bluetooth-le").BleDevice[]>;
    getConnectedDevices(services: any): Promise<import("@capacitor-community/bluetooth-le").BleDevice[]>;
    connect(deviceId: any, onDisconnect: any, options: any): Promise<void>;
    createBond(deviceId: any, options: any): Promise<void>;
    isBonded(deviceId: any): Promise<boolean>;
    disconnect(deviceId: any): Promise<void>;
    getServices(deviceId: any): Promise<import("@capacitor-community/bluetooth-le").BleService[]>;
    discoverServices(deviceId: any): Promise<void>;
    getMtu(deviceId: any): Promise<number>;
    requestConnectionPriority(deviceId: any, connectionPriority: any): Promise<void>;
    readRssi(deviceId: any): Promise<number>;
    read(deviceId: any, service: any, characteristic: any, options: any): Promise<any>;
    write(deviceId: any, service: any, characteristic: any, value: any, options: any): Promise<void>;
    writeWithoutResponse(deviceId: any, service: any, characteristic: any, value: any, options: any): Promise<void>;
    readDescriptor(deviceId: any, service: any, characteristic: any, descriptor: any, options: any): Promise<any>;
    writeDescriptor(deviceId: any, service: any, characteristic: any, descriptor: any, value: any, options: any): Promise<void>;
    startNotifications(deviceId: any, service: any, characteristic: any, callback: any): Promise<void>;
    stopNotifications(deviceId: any, service: any, characteristic: any): Promise<void>;
    validateRequestBleDeviceOptions(options: any): any;
    convertValue(value: any): any;
    convertObject(obj: any): {};
}
export {};
