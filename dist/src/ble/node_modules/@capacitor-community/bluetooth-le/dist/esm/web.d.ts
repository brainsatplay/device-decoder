export class BluetoothLeWeb extends WebPlugin {
    constructor(...args: any[]);
    deviceMap: Map<any, any>;
    discoveredDevices: Map<any, any>;
    scan: BluetoothLEScan;
    DEFAULT_CONNECTION_TIMEOUT: number;
    onAdvertisementReceivedCallback: any;
    onDisconnectedCallback: any;
    onCharacteristicValueChangedCallback: any;
    initialize(): Promise<void>;
    isEnabled(): Promise<{
        value: boolean;
    }>;
    requestEnable(): Promise<void>;
    enable(): Promise<void>;
    disable(): Promise<void>;
    startEnabledNotifications(): Promise<void>;
    stopEnabledNotifications(): Promise<void>;
    isLocationEnabled(): Promise<void>;
    openLocationSettings(): Promise<void>;
    openBluetoothSettings(): Promise<void>;
    openAppSettings(): Promise<void>;
    setDisplayStrings(): Promise<void>;
    requestDevice(options: any): Promise<{
        deviceId: any;
        name: any;
    }>;
    requestLEScan(options: any): Promise<void>;
    requestBleDeviceOptions: any;
    onAdvertisementReceived(event: any): void;
    stopLEScan(): Promise<void>;
    getDevices(options: any): Promise<{
        devices: {
            deviceId: any;
            name: any;
        }[];
    }>;
    getConnectedDevices(_options: any): Promise<{
        devices: {
            deviceId: any;
            name: any;
        }[];
    }>;
    connect(options: any): Promise<void>;
    onDisconnected(event: any): void;
    createBond(_options: any): Promise<void>;
    isBonded(_options: any): Promise<void>;
    disconnect(options: any): Promise<void>;
    getServices(options: any): Promise<{
        services: {
            uuid: any;
            characteristics: {
                uuid: any;
                properties: {
                    broadcast: any;
                    read: any;
                    writeWithoutResponse: any;
                    write: any;
                    notify: any;
                    indicate: any;
                    authenticatedSignedWrites: any;
                    reliableWrite: any;
                    writableAuxiliaries: any;
                };
                descriptors: any;
            }[];
        }[];
    }>;
    getDescriptors(characteristic: any): Promise<any>;
    getProperties(characteristic: any): {
        broadcast: any;
        read: any;
        writeWithoutResponse: any;
        write: any;
        notify: any;
        indicate: any;
        authenticatedSignedWrites: any;
        reliableWrite: any;
        writableAuxiliaries: any;
    };
    getCharacteristic(options: any): Promise<any>;
    getDescriptor(options: any): Promise<any>;
    discoverServices(_options: any): Promise<void>;
    getMtu(_options: any): Promise<void>;
    requestConnectionPriority(_options: any): Promise<void>;
    readRssi(_options: any): Promise<void>;
    read(options: any): Promise<{
        value: any;
    }>;
    write(options: any): Promise<void>;
    writeWithoutResponse(options: any): Promise<void>;
    readDescriptor(options: any): Promise<{
        value: any;
    }>;
    writeDescriptor(options: any): Promise<void>;
    startNotifications(options: any): Promise<void>;
    onCharacteristicValueChanged(event: any): void;
    stopNotifications(options: any): Promise<void>;
    getFilters(options: any): ({
        services: any[];
        name: any;
        namePrefix: any;
    } | {
        name: any;
        namePrefix: any;
        services?: undefined;
    })[];
    getDeviceFromMap(deviceId: any): any;
    getBleDevice(device: any): {
        deviceId: any;
        name: any;
    };
}
import { WebPlugin } from '@capacitor/core';
